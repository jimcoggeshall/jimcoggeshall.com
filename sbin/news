#!/usr/bin/env python3

import asyncio
import datetime
import websockets
import feedparser
import itertools
import random

import time
import json

class Messenger:

    def _select_entry(self, e):
    
        if "title" not in e or "description" not in e:
            return False

        filter_strings_title = {
            "kill",
            "dead",
            "die",
            "murder",
            "drug",
            "death",
            "body",
            "bodies",
            "corpse",
            "fatal",
            "stab",
            "attack",
            "accident",
            "discount",
            "sale",
            "percent off",
            "% off",
            "sex",
            "shot",
            "abort",
            "reproductive"
        }

        select = True

        title = e.get("title", "")
        title_lower = title.lower()
        if any([s in title_lower for s in filter_strings_title]):
            select = False

        author = e.get("author", "")
        if author == "The New York Times":
            select = False

        if len(e["description"]) <= 20:
            select = False
            
        if len(e["description"]) < len(e["title"]):
            select = False

        return select


    def _update_messages(self):
        self._feeds = [
            feedparser.parse(u) for u in self._feed_urls
        ]

        messages = []
        for feed in self._feeds:
            for e in feed["entries"]:
                if self._select_entry(e):
                    messages.append(
                        json.dumps( 
                            {"Title": e["title"], "Description": e["description"]},
                            separators=(',', ':')
                        )
                    )
        random.shuffle(messages)
        self._messages = itertools.cycle(messages)
        self._messages_updated = datetime.datetime.now()

    def __init__(self, lock):
        self._feed_urls = []
        with open("/etc/news/rss.conf", "r") as f:
            for line in f:
                self._feed_urls.append(line.rstrip())
        self._lock = lock
        self._connected = set()
        self._update_messages()
        self._message_age = datetime.datetime.now()
        self._message = next(self._messages)

    async def await_message(self):
        now = datetime.datetime.now()
        if (now - self._message_age).total_seconds() > 45:
            async with self._lock:
                now = datetime.datetime.now()
                if (now - self._messages_updated).total_seconds() > 60*60:
                    self._update_messages()
                self._message_age = datetime.datetime.now()
                self._message = next(self._messages)
                await self._send()

    async def register(self, websocket):
        message = self._message
        await websocket.send(message)
        self._connected.add(websocket)

    async def unregister(self, websocket):
        self._connected.remove(websocket)

    async def _send(self):
        message = self._message
        await asyncio.wait([ws.send(message) for ws in self._connected])


def main():
    
    lock = asyncio.Lock()
    messenger = Messenger(lock)

    async def broadcast(websocket, path):
        try:
            await messenger.register(websocket)
            while True:
                try:
                    await asyncio.wait_for(messenger.await_message(), timeout=30)
                except asyncio.TimeoutError:
                    await asyncio.sleep(1)
        finally:
            await messenger.unregister(websocket)


    start_server = websockets.serve(broadcast, "127.0.0.1", 8890)

    asyncio.get_event_loop().run_until_complete(start_server)
    asyncio.get_event_loop().run_forever()

    return 1


if __name__ == "__main__":
    main()
